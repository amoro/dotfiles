
" = Vimscript file settings = {{{
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}


" = Better settings = {{{
" Highlight the screen line of the cursor
set cursorline

" Allow moving the mouse on the whole screen
set virtualedit=all

" Allow tabbed menu for completion in command mode (:)
set wildmenu

" Make y, p and d work with the clipboard
set clipboard=unnamed

" Show a 120 column width indicator
set colorcolumn=120
highlight ColorColumn ctermbg=red
au FileType help,qf,netrw,location setlocal colorcolumn=

" highlight search results
set hlsearch
" }}}


" = Mappings = {{{
" ================
" Pressing kj to avoid esc for quiting insert mode
inoremap kj <Esc>l

" Make Y work like D, M, C
nnoremap Y y$

" Set marks with <localleader>m as m is used by easyclip for move (cut)
nnoremap <LocalLeader>m m

" Jump to marks with <localleader>` as ` is the localleader
nnoremap <LocalLeader>` `

" allow j and k to go up or down by visual lines rether than actual lines
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" }}}


" Use a special color scheme for MacVim GUI
if has("gui_running")
  colorscheme Tomorrow-Night-Bright
else
  colorscheme gruvbox
  set background=dark
endif


" search google with the word under the cursor
nmap <LocalLeader>g :call Google()<CR>
fun! Google()
  let keyword = expand("<cword>")
  let url = "http://www.google.com/search?q=" . keyword
  let path = ""
  exec 'silent !"' . path . 'open" ' . url
endfun


" = NeoVim Specific Settings = {{{
" ================================
if has('nvim')
  " = Terminal specific settings = {{{
  " ==================================
  " allow terminal buffer size to be very large
  let g:terminal_scrollback_buffer_size = 100000

  " map esc to exit to normal mode in terminal too
  tnoremap <Esc><Esc> <C-\><C-n>

  " make window commads work in the terminal from the insert mode
  tnoremap <c-w> <C-\><C-n><c-w>

  augroup terminal_vim
    autocmd!
    "autocmd BufEnter term://* normal! :QuickfixsignsDisable
    autocmd WinEnter term://* startinsert
  augroup END
  " }}}

  " Have thin cursor shap in insert mode
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

  " enable true color support
  "let $NVIM_TUI_ENABLE_TRUE_COLOR=1

  " = Terminal and Splits movment and creation = {{{
  " ================================================
  " Move between splits
  tnoremap <A-h> <C-\><C-n><C-w>h
  tnoremap <A-j> <C-\><C-n><C-w>j
  tnoremap <A-k> <C-\><C-n><C-w>k
  tnoremap <A-l> <C-\><C-n><C-w>l
  tnoremap <A-c> <C-\><C-n><C-w>c
  nnoremap <A-h> <C-w>h
  nnoremap <A-j> <C-w>j
  nnoremap <A-k> <C-w>k
  nnoremap <A-l> <C-w>l
  nnoremap <A-c> <C-w>c

  " New split creation
  tnoremap <A-d>    <C-\><C-n>:vsp<bar>enew<CR>
  tnoremap <A-s-d>  <C-\><C-n>:sp<bar>enew<CR>
  inoremap <A-d>    <ESC>:vsp<bar>enew<CR>
  inoremap <A-s-d>  <ESC>:sp<bar>enew<CR>
  nnoremap <A-d>    :vsp<bar>enew<CR>
  nnoremap <A-s-d>  :sp<bar>enew<CR>

  " New terminal creation
  tnoremap <A-t>    <C-\><C-n>:vsp<bar>enew<bar>call termopen("bash -l")<CR>
  tnoremap <A-s-t>  <C-\><C-n>:sp<bar>enew<bar>call termopen("bash -l")<CR>
  inoremap <A-t>    <ESC>:vsp<bar>enew<bar>call termopen("bash -l")<CR>
  inoremap <A-s-t>  <ESC>:sp<bar>enew<bar>call termopen("bash -l")<CR>
  nnoremap <A-t>    :vsp<bar>enew<bar>call termopen("bash -l")<CR>
  nnoremap <A-s-t>  :sp<bar>enew<bar>call termopen("bash -l")<CR>
  " }}}
endif
" }}}


" vimrc helpers
"nnoremap <localleader>sv :source ~/.vimrc.after<cr>
nnoremap <localleader>eva :vsplit ~/.vimrc.after<cr>
nnoremap <localleader>evb :vsplit ~/.vimrc.before<cr>

" = Syntastic = {{{
" =================
" maybe relace with: https://github.com/benekastah/neomake
" ---------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1 " Run all checkers
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'

" https://github.com/scrooloose/syntastic/wiki/Syntax-Checkers
let g:syntastic_python_checkers = ['pylama']
" }}}


" = incsearch = {{{
" ========================
" TODO: Maybe switch to https://github.com/junegunn/vim-oblique
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Turn off high lighting automaticly
" :h g:incsearch#auto_nohlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" Fuzzy Searching
function! s:config_fuzzyall(...) abort
  return extend(copy({
  \   'converters': [
  \     incsearch#config#fuzzy#converter(),
  \     incsearch#config#fuzzyspell#converter()
  \   ],
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> z/ incsearch#go(<SID>config_fuzzyall())
noremap <silent><expr> z? incsearch#go(<SID>config_fuzzyall({'command': '?'}))
noremap <silent><expr> zg? incsearch#go(<SID>config_fuzzyall({'is_stay': 1}))

" }}}

" Mapping to open Markdown preview (vim-livedown)
noremap gm LivedownPreview()<CR>

" Mappings for the Dash.app
nnoremap <silent> <localleader>d <Plug>DashSearch


" ----------------------------------------------------------
" setup the projects: https://github.com/amiorin/vim-project
" ----------------------------------------------------------
" Enable Nerd treee
let g:project_use_nerdtree = 1

" Set my starting path
call project#rc("~/work/")

" My projects
Project '~/mine/dev/Community' , 'Community'
Project '~/.dotfiles'          , 'My DotFiles :)'
